            ------
            MongoDB Asynchronous Java Driver
            ------
            ------

  The MongoDB Asynchronous Java Driver provides a high performance alternative to the
10gen provided Java driver.  The driver has been created to ensure maximum utilization of
resources on the client, in the network, and on the server.

  The driver is designed for use in highly threaded applications and makes extensive use of 
immutable objects to remove as much thread contention as possible.  In support of this goal the 
driver provides a high performance, thread safe, strongly typed BSON implementation.

Motivation

  The 10gen supported Java driver request model is to maintain a set of open connections 
and when a processing thread sends a request it:

    [[1]] Checks a connection out of the pool of open connections.

    [[2]] Writes the request to the connection.

    [[3]] Reads the response from the connection.

    [[4]] Returns the connection to the pool of open connections.

  This synchronous checkout/request/response/checkin means that each request must wait for the complete  
round trip time for the request, processing and response.  For many applications the
latency induced can be simply overcome by using more connections.  For either highly distributed
or high performance applications the connection explosion that occurs induces performance and 
scheduler issues on the MongoDB servers that limits the utility of this approach.

  Rather than try to force a more asynchronous model on the 10gen driver the MongoDB Asynchronous 
Java Driver instead creates a completely new driver that at its very core is asynchronous.  The
interface to the driver still provides synchronous methods but they are implemented using the 
asynchronous variants of the methods.

Usage

  The driver includes a strongly types {{{./apidocs/com/allanbank/mongodb/bson/package-summary.html}BSON implementation}}.  
The BSON package (and driver in general) make extensive use of 
{{{./apidocs/com/allanbank/mongodb/bson/builder/package-summary.html}builders}}
for constructing BSON Documents. 

  The main interface to the driver is via the 
{{{./apidocs/com/allanbank/mongodb/Mongo.html}Mongo}} interface.  The 
{{{./apidocs/com/allanbank/mongodb/MongoFactory.html}MongoFactory}} provides the ability
to create a Mongo instance from either a 
{{{./apidocs/com/allanbank/mongodb/MongoDbConfiguration.html}MongoDbConfiguration}} or a
{{{http://www.mongodb.org/display/DOCS/Connections}MongoDB Connection String}}.

  Once a Mongo instance has been created then 
{{{./apidocs/com/allanbank/mongodb/MongoDatabase.html}MongoDatabase}} and 
{{{./apidocs/com/allanbank/mongodb/MongoCollection.html}MongoCollection}} objects can be easily created.

  Most non-administrative methods will have three forms:

  [[1]] Synchronous - Normal method call semantics.  The response to the request is the return value of the method.\
{{{./apidocs/com/allanbank/mongodb/MongoCollection.html}Document findOne(Document)}}
  
  [[2]] Asynchronous Future - The response to the request can be retrieved from a Future.\
{{{./apidocs/com/allanbank/mongodb/MongoCollection.html}Future\<Document\> findOneAsync(Document)}}
  
  
  [[3]] Asynchronous Callback - The response to the request will be provided via a {{{./apidocs/com/allanbank/mongodb/Callback.html}callback}}. \
{{{./apidocs/com/allanbank/mongodb/MongoCollection.html}void findOneAsync(Callback\<Document\>, Document)}}

  []
  
  For the more common non-trivial commands to the server a set of domain objects and associated 
{{{./apidocs/com/allanbank/mongodb/builder/package-summary.html}builders}} are provided.  In addition 
to the commands there is also a {{{./apidocs/com/allanbank/mongodb/builder/QueryBuilder.html}query builder}} 
that provides a very natural mechanism for defining queries.

+----------------------------------------+
 import static com.allanbank.mongodb.builder.QueryBuilder.and
 import static com.allanbank.mongodb.builder.QueryBuilder.or
 import static com.allanbank.mongodb.builder.QueryBuilder.not
 import static com.allanbank.mongodb.builder.QueryBuilder.where
 
 Document query = 
           or( 
              where("f").greaterThan(23).lessThan(42).and("g").lessThan(3),
              and( 
                where("f").greaterThanOrEqualTo(42),
                not( where("g").lessThan(3) ) 
              )
           );
+----------------------------------------+

Performance

  While the usability of the driver is critical, its primary reason for existing is to enable maximum
performance from a MongoDB server.  The performance for the driver's {{{./bson_performance.html}BSON library}} 
and {{{./performance.html}overall}} performance have been benchmarked against the 10gen supported
driver showing favorable performance in both cases.

Thread Model

  For each physical sockets connection a pair of threads is created.  The first is responsible for
pushing requests to the server.  The second is responsible for reading the replies to the requests
and matching them with the appropriate request callback (if any).  This simple reader/writer model
provides for simplicity of programming and has been shown to perform as well if not better than 
using Java's NIO package for using a single thread across multiple connections.

  Because of the asynchronous nature of the core of the driver and its default behavior of trying to
balance requests across all open connections the driver can not guarantee that two requests to the server,
even from a single thread, will be executed in the order they are submitted on the client.  For client's
that need to serialize requests to the server can create a serial version of a
{{{./apidocs/com/allanbank/mongodb/Mongo.html#asSerializedMongo}Mongo}} implementation.  The only difference
between a serialized version and the non-serialized version is that the serialized version will only use
a single connection to the server.  The asSerializedMongo() and creation of the MongoDatabase 
and MongoCollection client side objects are extremely lightweight and have no server interaction 
to make even per request creation feasible.
  
Testing

  The driver has an extensive set of {{{./surefire-report.html}unit}}, {{{./failsafe-report.html}integration}} 
and {{{./failsafe-report.html#com.allanbank.mongodb.acceptance}acceptance}} tests. The unit tests alone provide 
line and branch coverage of over 90% and 85% respectively of the driver's source.  In addition several 
integration tests have been created to ensure that the driver's interpretation of various MongoDb provided 
documentation matches the server's implementation. For these tests a local MongoDB instance in the appropriate 
configuration is started as part of the test.  Lastly, the acceptable tests exercise both the interfaces 
provided by the driver but also the interaction of the driver with the various MongoDB applications and 
configurations.  Similar to the integration tests the acceptance tests start various configurations of 
MongoDB as part of the test.
