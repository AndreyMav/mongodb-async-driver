~~~
~~ #%L
~~ ycsb.apt - mongodb-async-driver - Allanbank Consulting, Inc.
~~ %%
~~ Copyright (C) 2011 - 2014 Allanbank Consulting, Inc.
~~ %%
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~ 
~~      http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~ #L%
~~~
            ------
            MongoDB Asynchronous Java Driver - YCSB Performance (2014)
            ------
            ------
            
Yahoo! Cloud Server Benchmark

  The {{{https://github.com/brianfrankcooper/YCSB/wiki}YCSB}} (Yahoo! Cloud Server Benchmark) provides 
a suite for testing various data stores against a set of well defined workloads that attempt to mimic 
different use cases.  For our purposes we are using the framework to compare the performance of the 
MongoDB Inc. supported driver (legacy) to the MongoDB Asynchronous Java Driver.

  Based on {{{./ycsb_2012.html}previous testing}} with the YCSB and other users experience with 
the MongoDB driver for YCSB we have created and enhanced version of the both the legacy and
the asynchronous driver.  The enhancements are beyond the scope of this document but contain what we 
feel is the optimal, realistic, configuration for both drivers.  We have also simplified the YCSB configuration to
be based on the MongoDB URI only. All of the changes are available from the 
{{{https://github.com/allanbank/YCSB/tree/async-mongodb-driver}GitHub Repository}}. We have also created a 
{{{https://github.com/brianfrankcooper/YCSB/pull/95}YCSB Pull Request}} containing all of the updates 
so they will be included in the upstream releases.

  The results of the benchmark for the 6 provided workloads (A-F) show clearly that the MongoDB Asynchronous 
Java Driver has <<lower latency>>, and <<higher throughput>> across the 
benchmark scenarios. In addition, this driver has a much <<lower slope of increasing latency>> as contention 
for the available connections increases.

  The following sections contain a high level description of each workload and the results for each.  The 
full {{{../images/ycsb/2014-05/2014-05-26_logs.tar.gz}launch script, output}}, and 
{{{../images/ycsb/2014-05/YCSB-2014-05.ods}analysis spreadsheet}} are also available for review.

  In a graphs below the latency values are displayed as a stock chart where the maximum value is the 95th percentile 
and the close value is the average latency.  It is important to note that the resolution of the 95th percentile reported
by the YCSB is in milliseconds.  The minimum and average values are reported in microseconds.  In the case of the 95th 
percentile being less than 1 millisecond a value of zero is reported, where for the minimum and average values 
non-zero values are reported.

Workload A - Update Heavy Workload

  The first workload has a 50/50 split between reads and updates of individual records.  This workload tries
to model a session store for a web container.  

  All of the default settings for the workload are the same as those provided by the benchmark except the number 
of records and operations have been increased to 1,000,000 each.

[../images/ycsb/2014-05/workload_a_throughput.png] Workload A - Throughput.

[../images/ycsb/2014-05/workload_a_read_latency.png] Workload A - Read Latency.

[../images/ycsb/2014-05/workload_a_update_latency.png] Workload A - Update Latency.


Workload B - Read Mostly Workload

  The second workload has a 95/5 split between reads and updates of individual records.  This workload tries
to model a blog or photo sharing entry where reads dominate but there may be occasional updates for comments
or tags.  

  All of the default settings for the workload are the same as those provided by the benchmark except the number 
of records and operations have been increased to 1,000,000 each.

[../images/ycsb/2014-05/workload_b_throughput.png] Workload B - Throughput.

[../images/ycsb/2014-05/workload_b_read_latency.png] Workload B - Read Latency.

[../images/ycsb/2014-05/workload_b_update_latency.png] Workload B - Update Latency.


Workload C - Read Only Workload

  The third workload only performs reads of records.  This workload tries to model a situation of a read-only
cache where updates are performed by some off-line process.

  All of the default settings for the workload are the same as those provided by the benchmark except the number 
of records and operations have been increased to 1,000,000 each.

[../images/ycsb/2014-05/workload_c_throughput.png] Workload C - Throughput.

[../images/ycsb/2014-05/workload_c_read_latency.png] Workload C - Read Latency.


Workload D - Read Latest Workload

  The fourth workload has a 95/5 split between reads and inserts of individual records.  This workload tries
to model a social network of user status updates.  

  All of the default settings for the workload are the same as those provided by the benchmark except the number 
of records and operations have been increased to 1,000,000 each.

[../images/ycsb/2014-05/workload_d_throughput.png] Workload D - Throughput.

[../images/ycsb/2014-05/workload_d_read_latency.png] Workload D - Read Latency.

[../images/ycsb/2014-05/workload_d_insert_latency.png] Workload D - Insert Latency.


Workload E - Read Latest Workload

  The fifth workload has a 95/5 split between scans and inserts of records.  This workload tries
to model a threaded discussion of clustered comments.  

  All of the default settings for the workload are the same as those provided by the benchmark except the number 
of records has been increased to 1,000,000 and the number of operations has been increased to 250,000.

  This workload reads large volumes of data from the MongoDB servers.  <<<mongostat>>> regularly reported in excess of
100MB/second <<<netout>>> during the Asynchronous Java Driver runs.  The relatively flat throughput is primarily due 
to the limitations in bandwidth (1Gb/s) between the client machine and server.

[../images/ycsb/2014-05/workload_e_throughput.png] Workload E - Throughput.

[../images/ycsb/2014-05/workload_e_scan_latency.png] Workload E - Scan Latency.

[../images/ycsb/2014-05/workload_e_insert_latency.png] Workload E - Insert Latency.


Workload F - Read-Modify-Write Workload

  The last workload has a 50/50 split between reads and read/modify/updates of records.  

  All of the default settings for the workload are the same as those provided by the benchmark except the number 
of records and operations have been increased to 1,000,000 each.

[../images/ycsb/2014-05/workload_f_throughput.png] Workload F - Throughput.

[../images/ycsb/2014-05/workload_f_read_modify_write_latency.png] Workload F - Read/Modify/Write Latency.

[../images/ycsb/2014-05/workload_f_read_latency.png] Workload F - Read Latency.

[../images/ycsb/2014-05/workload_f_update_latency.png] Workload F - Update Latency.


Test Environment

  The test client was run on an Amazon EC2 m3.xlarge instance within the US East (Virginia) Zone #12.
The MongoDB provided {{{http://docs.mongodb.org/ecosystem/platforms/amazon-ec2/}ami-b0ba55d8}} 
which is configured to use MongoDB 2.4 with 4000 IOPS. JDK 1.7 was used.

  The MongoDB server was a standalone mongod also running an Amazon EC2 m3.xlarge instance within 
the US East (Virginia) Zone #12. It also used the same AMI as the client. Average ping times between 
the machines was about 0.25 ms.  The mongod process was started with the system init scripts.
